package tr.com.dr.android.azure;

import android.os.Build.VERSION;
import android.util.Base64;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.net.URLEncoder;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Calendar;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;

import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;

import org.apache.http.Header;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpUriRequest;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.EntityEnclosingRequestWrapper;
import org.apache.http.message.BasicHttpEntityEnclosingRequest;

/**
 * Created by mustafaguven on 07.01.2016.
 */
class Connection {
    private static final String SHARED_ACCESS_KEY_NAME = "SharedAccessKeyName";
    private static final String SHARED_ACCESS_KEY = "SharedAccessKey";
    private static final String AUTHORIZATION_HEADER = "Authorization";
    private static final String UTC_TIME_ZONE = "UTC";
    private static final String UTF8_ENCODING = "UTF-8";
    private static final String ENDPOINT_KEY = "Endpoint";
    private static final int EXPIRE_MINUTES = 5;
    private static final String SDK_VERSION = "2014-09";
    private static final String API_VERSION_KEY = "api-version";
    private static final String API_VERSION = "2014-09";
    private Map<String, String> mConnectionData;

    public Connection(String connectionString) {
        this.mConnectionData = ConnectionStringParser.parse(connectionString);
    }

    public String executeRequest(String resource, String content, String contentType, String method, Header... extraHeaders)
            throws Exception {
        return executeRequest(resource, content, contentType, method, null, extraHeaders);
    }

    public String executeRequest(String resource, String content, String contentType, String method, String targetHeaderName, Header... extraHeaders)
            throws Exception {
        URI endpointURI = URI.create((String) this.mConnectionData.get("Endpoint"));
        String scheme = endpointURI.getScheme();

        String url = "https" + endpointURI.toString().substring(scheme.length());
        if (!url.endsWith("/")) {
            url = url + "/";
        }
        url = url + resource;

        url = AddApiVersionToUrl(url);

        BasicHttpEntityEnclosingRequest request = new BasicHttpEntityEnclosingRequest(method, url);
        if (!Utils.isNullOrWhiteSpace(content)) {
            request.setEntity(new StringEntity(content, "UTF-8"));
        }
        request.addHeader("Content-Type", contentType);
        EntityEnclosingRequestWrapper wrapper = new EntityEnclosingRequestWrapper(request);
        if (extraHeaders != null) {
            Header[] arrayOfHeader;
            int j = (arrayOfHeader = extraHeaders).length;
            for (int i = 0; i < j; i++) {
                Header header = arrayOfHeader[i];
                wrapper.addHeader(header);
            }
        }
        return executeRequest(wrapper, targetHeaderName);
    }

    private String AddApiVersionToUrl(String url) {
        URI uri = URI.create(url);
        if (uri.getQuery() == null) {
            url = url + "?";
        } else {
            url = url + "&";
        }
        url = url + "api-version" + "=" + "2014-09";

        return url;
    }

    /* Error */
    private String executeRequest(HttpUriRequest request, String targetHeaderName)
            throws Exception {
        // Byte code:
        //   0: aload_0
        //   1: aload_1
        //   2: invokespecial 182	com/microsoft/windowsazure/messaging/Connection:addAuthorizationHeader	(Lorg/apache/http/client/methods/HttpUriRequest;)V
        //   5: aconst_null
        //   6: astore 5
        //   8: aconst_null
        //   9: astore 6
        //   11: iconst_0
        //   12: istore 7
        //   14: aload_0
        //   15: invokespecial 186	com/microsoft/windowsazure/messaging/Connection:getUserAgent	()Ljava/lang/String;
        //   18: invokestatic 189	android/net/http/AndroidHttpClient:newInstance	(Ljava/lang/String;)Landroid/net/http/AndroidHttpClient;
        //   21: astore 6
        //   23: aload 6
        //   25: aload_1
        //   26: invokevirtual 195	android/net/http/AndroidHttpClient:execute	(Lorg/apache/http/client/methods/HttpUriRequest;)Lorg/apache/http/HttpResponse;
        //   29: astore 8
        //   31: aload 8
        //   33: invokeinterface 199 1 0
        //   38: invokeinterface 205 1 0
        //   43: istore_3
        //   44: aload_0
        //   45: aload 8
        //   47: invokespecial 210	com/microsoft/windowsazure/messaging/Connection:getResponseContent	(Lorg/apache/http/HttpResponse;)Ljava/lang/String;
        //   50: astore 4
        //   52: aload_2
        //   53: ifnull +53 -> 106
        //   56: aload 8
        //   58: aload_2
        //   59: invokeinterface 214 2 0
        //   64: ifne +9 -> 73
        //   67: iconst_1
        //   68: istore 7
        //   70: goto +36 -> 106
        //   73: aload 8
        //   75: aload_2
        //   76: invokeinterface 217 2 0
        //   81: invokeinterface 221 1 0
        //   86: astore 5
        //   88: goto +18 -> 106
        //   91: astore 9
        //   93: aload 6
        //   95: ifnull +8 -> 103
        //   98: aload 6
        //   100: invokevirtual 226	android/net/http/AndroidHttpClient:close	()V
        //   103: aload 9
        //   105: athrow
        //   106: aload 6
        //   108: ifnull +8 -> 116
        //   111: aload 6
        //   113: invokevirtual 226	android/net/http/AndroidHttpClient:close	()V
        //   116: iload_3
        //   117: sipush 200
        //   120: if_icmplt +57 -> 177
        //   123: iload_3
        //   124: sipush 300
        //   127: if_icmpge +50 -> 177
        //   130: iload 7
        //   132: ifeq +33 -> 165
        //   135: new 229	com/microsoft/windowsazure/messaging/NotificationHubException
        //   138: dup
        //   139: new 90	java/lang/StringBuilder
        //   142: dup
        //   143: ldc -25
        //   145: invokespecial 94	java/lang/StringBuilder:<init>	(Ljava/lang/String;)V
        //   148: aload_2
        //   149: invokevirtual 107	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   152: ldc -23
        //   154: invokevirtual 107	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
        //   157: invokevirtual 111	java/lang/StringBuilder:toString	()Ljava/lang/String;
        //   160: iload_3
        //   161: invokespecial 235	com/microsoft/windowsazure/messaging/NotificationHubException:<init>	(Ljava/lang/String;I)V
        //   164: athrow
        //   165: aload_2
        //   166: ifnonnull +8 -> 174
        //   169: aload 4
        //   171: goto +5 -> 176
        //   174: aload 5
        //   176: areturn
        //   177: iload_3
        //   178: sipush 404
        //   181: if_icmpne +11 -> 192
        //   184: new 238	com/microsoft/windowsazure/messaging/NotificationHubResourceNotFoundException
        //   187: dup
        //   188: invokespecial 240	com/microsoft/windowsazure/messaging/NotificationHubResourceNotFoundException:<init>	()V
        //   191: athrow
        //   192: iload_3
        //   193: sipush 401
        //   196: if_icmpne +11 -> 207
        //   199: new 241	com/microsoft/windowsazure/messaging/NotificationHubUnauthorizedException
        //   202: dup
        //   203: invokespecial 243	com/microsoft/windowsazure/messaging/NotificationHubUnauthorizedException:<init>	()V
        //   206: athrow
        //   207: iload_3
        //   208: sipush 410
        //   211: if_icmpne +11 -> 222
        //   214: new 244	com/microsoft/windowsazure/messaging/RegistrationGoneException
        //   217: dup
        //   218: invokespecial 246	com/microsoft/windowsazure/messaging/RegistrationGoneException:<init>	()V
        //   221: athrow
        //   222: new 229	com/microsoft/windowsazure/messaging/NotificationHubException
        //   225: dup
        //   226: aload 4
        //   228: iload_3
        //   229: invokespecial 235	com/microsoft/windowsazure/messaging/NotificationHubException:<init>	(Ljava/lang/String;I)V
        //   232: athrow
        // Line number table:
        //   Java source line #208	-> byte code offset #0
        //   Java source line #212	-> byte code offset #5
        //   Java source line #213	-> byte code offset #8
        //   Java source line #214	-> byte code offset #11
        //   Java source line #217	-> byte code offset #14
        //   Java source line #219	-> byte code offset #23
        //   Java source line #221	-> byte code offset #31
        //   Java source line #222	-> byte code offset #44
        //   Java source line #224	-> byte code offset #52
        //   Java source line #225	-> byte code offset #56
        //   Java source line #226	-> byte code offset #67
        //   Java source line #227	-> byte code offset #70
        //   Java source line #228	-> byte code offset #73
        //   Java source line #232	-> byte code offset #88
        //   Java source line #233	-> byte code offset #93
        //   Java source line #234	-> byte code offset #98
        //   Java source line #236	-> byte code offset #103
        //   Java source line #233	-> byte code offset #106
        //   Java source line #234	-> byte code offset #111
        //   Java source line #238	-> byte code offset #116
        //   Java source line #239	-> byte code offset #130
        //   Java source line #240	-> byte code offset #135
        //   Java source line #242	-> byte code offset #165
        //   Java source line #243	-> byte code offset #177
        //   Java source line #244	-> byte code offset #184
        //   Java source line #245	-> byte code offset #192
        //   Java source line #246	-> byte code offset #199
        //   Java source line #247	-> byte code offset #207
        //   Java source line #248	-> byte code offset #214
        //   Java source line #250	-> byte code offset #222
        // Local variable table:
        //   start	length	slot	name	signature
        //   0	233	0	this	Connection
        //   0	233	1	request	HttpUriRequest
        //   0	233	2	targetHeaderName	String
        //   43	2	3	status	int
        //   106	123	3	status	int
        //   50	3	4	content	String
        //   106	121	4	content	String
        //   6	169	5	headerValue	String
        //   9	103	6	client	android.net.http.AndroidHttpClient
        //   12	119	7	noHeaderButExpected	boolean
        //   29	45	8	response	HttpResponse
        //   91	13	9	localObject	Object
        // Exception table:
        //   from	to	target	type
        //   14	91	91	finally
    }

    private String getResponseContent(HttpResponse response)
            throws IOException {
        HttpEntity entity = response.getEntity();
        if (entity != null) {
            InputStream instream = entity.getContent();
            BufferedReader reader = new BufferedReader(new InputStreamReader(instream));

            StringBuilder sb = new StringBuilder();
            String content = reader.readLine();
            while (content != null) {
                sb.append(content);
                sb.append('\n');
                content = reader.readLine();
            }
            return sb.toString();
        }
        return null;
    }

    private void addAuthorizationHeader(HttpUriRequest request)
            throws InvalidKeyException {
        String token = generateAuthToken(request.getURI().toString());

        request.addHeader("Authorization", token);
    }

    private String generateAuthToken(String url)
            throws InvalidKeyException {
        String keyName = (String) this.mConnectionData.get("SharedAccessKeyName");
        if (Utils.isNullOrWhiteSpace(keyName)) {
            throw new AssertionError("SharedAccessKeyName");
        }
        String key = (String) this.mConnectionData.get("SharedAccessKey");
        if (Utils.isNullOrWhiteSpace(key)) {
            throw new AssertionError("SharedAccessKey");
        }
        try {
            url = URLEncoder.encode(url, "UTF-8").toLowerCase(Locale.getDefault());
        } catch (UnsupportedEncodingException localUnsupportedEncodingException) {
        }
        Calendar expireDate = Calendar.getInstance(TimeZone.getTimeZone("UTC"));
        expireDate.add(Calendar.MINUTE, 5);

        long expires = expireDate.getTimeInMillis() / 1000L;

        String toSign = url + '\n' + expires;

        byte[] bytesToSign = toSign.getBytes();
        Mac mac = null;
        try {
            mac = Mac.getInstance("HmacSHA256");
        } catch (NoSuchAlgorithmException localNoSuchAlgorithmException) {
        }
        SecretKeySpec secret = new SecretKeySpec(key.getBytes(), mac.getAlgorithm());
        mac.init(secret);
        byte[] signedHash = mac.doFinal(bytesToSign);
        String base64Signature = Base64.encodeToString(signedHash, 0);
        base64Signature = base64Signature.trim();
        try {
            base64Signature = URLEncoder.encode(base64Signature, "UTF-8");
        } catch (UnsupportedEncodingException localUnsupportedEncodingException1) {
        }
        String token = "SharedAccessSignature sr=" + url + "&sig=" + base64Signature + "&se=" + expires + "&skn=" + keyName;

        return token;
    }

    private String getUserAgent() {
        String userAgent = String.format("NOTIFICATIONHUBS/%s (api-origin=%s; os=%s; os_version=%s;)", new Object[]{
                "2014-09", PnsSpecificRegistrationFactory.getInstance().getAPIOrigin(), "Android", Build.VERSION.RELEASE});

        return userAgent;
    }
}
